{"version":3,"sources":["components/Question/index.js","services/trivia.js","services/gravatar.js","services/localstorage.js","redux/actions/index.js","pages/Configuration/index.js","pages/Login/index.js","pages/Ranking/index.js","components/Header/index.js","pages/Trivia/index.js","pages/FeedBack/index.js","App.js","redux/reducers/player.js","redux/reducers/token.js","redux/reducers/trivia.js","redux/reducers/configs.js","redux/reducers/index.js","redux/store/index.js","serviceWorker.js","index.js","images/svg_avatar.svg"],"names":["interval","fetchAPI","url","a","fetch","response","json","data","getGravatarUrl","email","md5","toString","getRanking","JSON","parse","localStorage","getItem","setRanking","ranking","sortedRanking","sort","playerA","playerB","score","setItem","stringify","setToken","token","successFetchingToken","type","payload","fetchToken","dispatch","console","log","successFetchingTrivia","trivia","difficultyObj","value","name","typeObj","Configuration","category","difficulty","handleChange","target","id","props","dispatchSetCategory","dispatchSetDifficulty","dispatchSetType","setState","handleClick","history","push","state","categories","categoriesFetched","trivia_categories","this","className","data-testid","onClick","htmlFor","onChange","map","key","Component","connect","configs","setCategory","setDifficulty","setType","Login","gravatarEmail","dispatchResetGame","Boolean","length","isDisabledButton","dispatchSetUser","dispatchFetchToken","action","method","src","svgAvatar","alt","placeholder","required","disabled","user","setUser","Ranking","rankingList","storageSort","storage","b","index","picture","Header","React","player","Question","timer","randomCorrectIndex","Math","floor","random","isBtnNextVisible","hasStylesBtns","clickedAnswerIndex","startTimer","setInterval","clearInterval","handleClickAnswer","correctIndex","clickedIndex","dispatchSetScore","question","Number","hard","medium","easy","handleClickNextQuestion","questionIndexNext","questionIndex","setStylesQuestions","isCorrect","isSelected","renderQuestion","correctAnswer","questionText","cleanQuestionText","dangerouslySetInnerHTML","__html","correct","incorrectList","answersList","splice","answer","event","indexOf","correct_answer","incorrectAnswers","incorrect_answers","sanitizeHtml","renderMultipleAnswers","renderBoolAnswers","setScore","Trivia","prevState","dispatchFetchTrivia","configuration","prevToken","responseCode","questions","isLoading","fetchTrivia","FeedBack","feedback","assertions","redirectToLogin","redirectToRanking","currentRanking","isNewPlayer","every","prevPlayer","newRanking","saveRanking","App","exact","path","component","INITIAL_STATE","isFetching","error","undefined","results","response_code","initialState","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.790e48e6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes, { oneOfType } from 'prop-types';\nimport sanitizeHtml from 'sanitize-html';\nimport { connect } from 'react-redux';\nimport { setScore } from '../../redux/actions';\nimport './style.css';\n\nconst TIMER_SEC = 30;\nconst ANSWERS_ARRAY_SIZE = 4;\nconst CORRECT_ANSWER = 'correct-answer';\nconst ONE_SECOND = 1000;\nconst LIMIT_QUESTIONS = 4;\nconst TIMER_ENDING = 5;\nlet interval;\n\nclass Question extends React.Component {\n  state = {\n    timer: TIMER_SEC,\n    randomCorrectIndex: Math.floor(Math.random() * ANSWERS_ARRAY_SIZE),\n    isBtnNextVisible: false,\n    hasStylesBtns: false,\n    clickedAnswerIndex: '',\n  };\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  startTimer = () => {\n    interval = setInterval(() => {\n      const { timer } = this.state;\n      if (timer <= 0) {\n        clearInterval(interval);\n      } else {\n        this.setState({\n          timer: timer - 1,\n        }, () => {\n          if (timer === 1) {\n            this.setState({\n              hasStylesBtns: true,\n            });\n          }\n        });\n      }\n    }, ONE_SECOND);\n  }\n\n  handleClickAnswer = ({ target: { value: clickedIndex } }, correctIndex) => {\n    const { timer } = this.state;\n    const { dispatchSetScore, question: { difficulty } } = this.props;\n    const difficultyPoints = { hard: 3, medium: 2, easy: 1 };\n\n    // para o timer\n    clearInterval(interval);\n\n    if (Number(clickedIndex) === correctIndex) {\n      // set o score se acertou no redux + Assertion +1\n      dispatchSetScore(timer, difficultyPoints[difficulty]);\n    }\n\n    this.setState({\n      isBtnNextVisible: true,\n      hasStylesBtns: true,\n      clickedAnswerIndex: clickedIndex,\n    });\n  }\n\n  handleClickNextQuestion = () => {\n    // fazer um question++ para proxima pergunta\n    const { questionIndexNext, questionIndex, history } = this.props;\n    if (questionIndex < LIMIT_QUESTIONS) {\n      questionIndexNext();\n      this.setState({\n        isBtnNextVisible: false,\n        hasStylesBtns: false,\n        timer: TIMER_SEC,\n        randomCorrectIndex: Math.floor(Math.random() * ANSWERS_ARRAY_SIZE),\n      }, this.startTimer);\n    } else {\n      // quando chegar na ultima e clickar em prox sera redirecionado para feedback\n      history.push('/feedback');\n    }\n  }\n\n  setStylesQuestions = (isCorrect, isSelected) => (\n    `answer${isCorrect ? ' correct-answer' : ' wrong-answer'}`\n      + `${isSelected ? ' selected-answer' : ''}`\n  )\n\n  renderMultipleAnswers(correct, incorrectList) {\n    const { randomCorrectIndex, timer, hasStylesBtns,\n      isBtnNextVisible, clickedAnswerIndex } = this.state;\n    const answersList = [...incorrectList];\n\n    answersList.splice(randomCorrectIndex, 0, correct);\n    return answersList.map((answer, index) => (\n      <button\n        onClick={ (event) => this.handleClickAnswer(event, randomCorrectIndex) }\n        className={ (hasStylesBtns)\n          ? this.setStylesQuestions((index === randomCorrectIndex),\n            (index === Number(clickedAnswerIndex)))\n          : 'answer' }\n        type=\"button\"\n        disabled={ timer < 1 || isBtnNextVisible }\n        key={ index }\n        value={ index }\n        data-testid={ index === randomCorrectIndex\n          ? CORRECT_ANSWER\n          : `wrong-answer${incorrectList.indexOf(answer)}` }\n      >\n        {answer}\n      </button>\n    ));\n  }\n\n  renderBoolAnswers(correct) {\n    const answersList = ['True', 'False'];\n    const { timer, hasStylesBtns, isBtnNextVisible, clickedAnswerIndex } = this.state;\n\n    return (\n      <>\n        {\n          answersList.map((answer, index) => (\n            <button\n              type=\"button\"\n              key={ index }\n              onClick={ (event) => (\n                this.handleClickAnswer(event, answersList.indexOf(correct))\n              ) }\n              className={ (hasStylesBtns)\n                ? this.setStylesQuestions((answer === correct),\n                  (index === Number(clickedAnswerIndex)))\n                : 'answer' }\n              disabled={ timer < 1 || isBtnNextVisible }\n              value={ index }\n              data-testid={ answer === correct\n                ? CORRECT_ANSWER\n                : 'wrong-answer-0' }\n            >\n              {answer}\n            </button>\n          ))\n        }\n      </>\n    );\n  }\n\n  renderQuestion = (correctAnswer, category, questionText, cleanQuestionText) => (\n    <div className=\"rotated-card-1\">\n      <div className=\"rotated-card-2\">\n        <div className=\"question-card\">\n          <h1 className=\"category\" data-testid=\"question-category\">{category}</h1>\n          {correctAnswer === 'Dirk the Daring'\n            ? <p data-testid=\"question-text\">{questionText}</p>\n            : (\n              <p\n                className=\"question\"\n                data-testid=\"question-text\"\n                // eslint-disable-next-line react/no-danger\n                dangerouslySetInnerHTML={ { __html: cleanQuestionText } }\n              />\n            )}\n        </div>\n      </div>\n    </div>\n  )\n\n  render() {\n    const { question: { type, category, question: questionText,\n      correct_answer: correctAnswer, incorrect_answers: incorrectAnswers } } = this.props;\n    const { timer, isBtnNextVisible } = this.state;\n    const cleanQuestionText = sanitizeHtml(questionText);\n\n    return (\n      <main className=\"Question\">\n        <section className=\"question-container\">\n          {this.renderQuestion(correctAnswer, category, questionText, cleanQuestionText)}\n          <div className={ `timer ${timer <= TIMER_ENDING && ' timer-ending'}` }>\n            { `${timer}'` }\n          </div>\n        </section>\n\n        <div className=\"vl\" />\n\n        <section className=\"buttons-container\" data-testid=\"answer-options\">\n          {type === 'multiple'\n            ? this.renderMultipleAnswers(correctAnswer, incorrectAnswers)\n            : this.renderBoolAnswers(correctAnswer)}\n          {\n            (isBtnNextVisible || timer < 1) && (\n              <button\n                className=\"next-button\"\n                onClick={ this.handleClickNextQuestion }\n                data-testid=\"btn-next\"\n                type=\"button\"\n              >\n                Próxima\n              </button>\n            )\n          }\n        </section>\n      </main>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  question: PropTypes.objectOf(oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n  ])).isRequired,\n  dispatchSetScore: PropTypes.func.isRequired,\n  questionIndexNext: PropTypes.func.isRequired,\n  questionIndex: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSetScore: (timer, difficulty) => dispatch(setScore(timer, difficulty)),\n});\n\nexport default connect(null, mapDispatchToProps)(Question);\n","const fetchAPI = async (url) => {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n};\n\nexport default fetchAPI;\n","import md5 from 'crypto-js/md5';\n\nconst getGravatarUrl = (email) => (\n  `https://www.gravatar.com/avatar/${md5(email).toString()}`\n);\n\nexport default getGravatarUrl;\n","import getGravatarUrl from './gravatar';\n\nexport const getRanking = () => JSON.parse(localStorage.getItem('ranking')) || [];\nconst setRanking = (ranking) => {\n  const sortedRanking = [...ranking];\n  sortedRanking.sort((playerA, playerB) => playerB.score - playerA.score);\n  localStorage.setItem('ranking', JSON.stringify(sortedRanking));\n};\n\nexport const saveRanking = ({ name, score, gravatarEmail }) => {\n  const picture = getGravatarUrl(gravatarEmail);\n  const currentRanking = getRanking();\n  if (!currentRanking.length) {\n    setRanking([{ name, score, picture }]);\n  } else {\n    const isNewPlayer = currentRanking\n      .every((prevPlayer) => (\n        !(prevPlayer.name === name && prevPlayer.picture === picture)\n      ));\n    const newRanking = currentRanking.map((prevPlayer) => {\n      if (prevPlayer.name === name && prevPlayer.picture === picture\n        && prevPlayer.score < score) {\n        return { name, score, picture };\n      }\n      return prevPlayer;\n    });\n    if (isNewPlayer) {\n      newRanking.push({ name, score, picture });\n    }\n    setRanking(newRanking);\n  }\n};\n\nexport const getToken = () => localStorage.getItem('token');\nexport const setToken = (token) => localStorage.setItem('token', token);\n","import { setToken } from '../../services/localstorage';\nimport fetchAPI from '../../services/trivia';\n// ACTIONS TYPES\n\nexport const SET_USER = 'SET_USER';\nexport const SET_SCORE = 'SET_SCORE';\nexport const RESET_GAME = 'RESET_GAME';\nconst DEFAULT_SCORE = 10;\n\nexport const TOKEN_SUCCESS = 'TOKEN_SUCCESS';\n// Salve no LocalStorage o token recebido utilizando a chave token\n\nexport const TRIVIA_FETCHING = 'TRIVIA_FETCHING';\nexport const TRIVIA_SUCCESS = 'TRIVIA_SUCCESS';\nexport const TRIVIA_ERROR = 'TRIVIA_ERROR';\n\nexport const SET_CATEGORY = 'SET_CATEGORY';\nexport const SET_DIFFICULTY = 'SET_DIFFICULTY';\nexport const SET_TYPE = 'SET_TYPE';\n\n// ACTIONS CREATORS\n\nexport const setUser = (user) => ({\n  type: SET_USER,\n  payload: user,\n});\n\nexport const setScore = (timer, difficulty) => ({\n  type: SET_SCORE,\n  payload: DEFAULT_SCORE + timer * difficulty,\n});\n\nexport const resetGame = () => ({\n  type: RESET_GAME,\n});\n\nexport const successFetchingToken = (token) => ({\n  type: TOKEN_SUCCESS,\n  payload: token,\n});\n\nexport const fetchToken = () => async (dispatch) => {\n  try {\n    const { token } = await fetchAPI('https://opentdb.com/api_token.php?command=request');\n    setToken(token);\n    dispatch(successFetchingToken(token));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst startFetchingTrivia = () => ({\n  type: TRIVIA_FETCHING,\n});\n\nexport const successFetchingTrivia = (trivia) => ({\n  type: TRIVIA_SUCCESS,\n  payload: trivia,\n});\n\nconst errorFetchingTrivia = (error) => ({\n  type: TRIVIA_ERROR,\n  payload: error,\n});\n\nexport const fetchTrivia = (token, { category, difficulty, type }) => (\n  async (dispatch) => {\n    dispatch(startFetchingTrivia());\n    const url = (category + difficulty + type === '')\n      ? `https://opentdb.com/api.php?amount=5&token=${token}`\n      : `https://opentdb.com/api.php?amount=5&token=${token}&category=${category}&difficulty=${difficulty}&type=${type}`;\n    try {\n      const trivia = await fetchAPI(url);\n      dispatch(successFetchingTrivia(trivia));\n    } catch (error) {\n      dispatch(errorFetchingTrivia(error));\n    }\n  }\n);\n\nexport const setCategory = (category) => ({\n  type: SET_CATEGORY,\n  payload: category,\n});\n\nexport const setDifficulty = (difficulty) => ({\n  type: SET_DIFFICULTY,\n  payload: difficulty,\n});\n\nexport const setType = (type) => ({\n  type: SET_TYPE,\n  payload: type,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchAPI from '../../services/trivia';\nimport './style.css';\nimport { setCategory, setDifficulty, setType } from '../../redux/actions';\n\nconst difficultyObj = [\n  { value: '', name: 'Todas' },\n  { value: 'easy', name: 'Fácil' },\n  { value: 'medium', name: 'Médio' },\n  { value: 'hard', name: 'Difícil' },\n];\n\nconst typeObj = [\n  { value: '', name: 'Todos' },\n  { value: 'boolean', name: 'Verdadeiro ou Falso' },\n  { value: 'multiple', name: 'Múltipla Escolha' },\n];\n\nexport class Configuration extends Component {\n  constructor({ category, difficulty, type }) {\n    super();\n    this.state = {\n      categories: [],\n      category,\n      difficulty,\n      type,\n    };\n  }\n\n  async componentDidMount() {\n    const { trivia_categories: categoriesFetched } = await fetchAPI('https://opentdb.com/api_category.php');\n    const categories = [{ name: 'Todas', id: '' }, ...categoriesFetched];\n    this.setState({\n      categories,\n    });\n  }\n\n  handleChange = ({ target: { id, value } }) => {\n    const { dispatchSetCategory, dispatchSetDifficulty, dispatchSetType } = this.props;\n    switch (id) {\n    case 'category':\n      dispatchSetCategory(value);\n      break;\n    case 'difficulty':\n      dispatchSetDifficulty(value);\n      break;\n    case 'type':\n      dispatchSetType(value);\n      break;\n    default:\n      break;\n    }\n    this.setState({\n      [id]: value,\n    });\n  };\n\n  handleClick = () => {\n    const { history } = this.props;\n    history.push('/triviaApp');\n  }\n\n  render() {\n    const { categories, category, difficulty, type } = this.state;\n\n    return (\n      <main className=\"Configuration\">\n        <section className=\"title-container\">\n          <h1 className=\"config-title\" data-testid=\"settings-title\">\n            Configurações\n          </h1>\n          <button\n            className=\"home-button\"\n            data-testid=\"btn-go-home\"\n            type=\"button\"\n            onClick={ this.handleClick }\n          >\n            Início\n          </button>\n        </section>\n        <section className=\"config-container\">\n          <label className=\"config-label\" htmlFor=\"category\">\n            Categoria\n            <select\n              className=\"config-select\"\n              id=\"category\"\n              onChange={ this.handleChange }\n              value={ category }\n            >\n              {categories.map(({ name, id }) => (\n                <option key={ id } value={ id }>{name}</option>\n              ))}\n            </select>\n          </label>\n\n          <label className=\"config-label\" htmlFor=\"difficulty\">\n            Dificuldade\n            <select\n              className=\"config-select\"\n              id=\"difficulty\"\n              onChange={ this.handleChange }\n              value={ difficulty }\n            >\n              {difficultyObj.map(({ name, value }) => (\n                <option key={ value } value={ value }>{name}</option>\n              ))}\n            </select>\n          </label>\n\n          <label className=\"config-label\" htmlFor=\"type\">\n            Tipo de Questão\n            <select\n              className=\"config-select\"\n              id=\"type\"\n              onChange={ this.handleChange }\n              value={ type }\n            >\n              {typeObj.map(({ name, value }) => (\n                <option key={ value } value={ value }>{name}</option>\n              ))}\n            </select>\n          </label>\n        </section>\n      </main>\n    );\n  }\n}\n\nConfiguration.propTypes = {\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatchSetCategory: PropTypes.func.isRequired,\n  dispatchSetDifficulty: PropTypes.func.isRequired,\n  dispatchSetType: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  category: state.configs.category,\n  difficulty: state.configs.difficulty,\n  type: state.configs.type,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSetCategory: (category) => dispatch(setCategory(category)),\n  dispatchSetDifficulty: (difficulty) => dispatch(setDifficulty(difficulty)),\n  dispatchSetType: (type) => dispatch(setType(type)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Configuration);\n","import propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchToken, resetGame, setUser } from '../../redux/actions';\nimport svgAvatar from '../../images/svg_avatar.svg';\nimport './style.css';\n\nclass Login extends Component {\n  state = {\n    gravatarEmail: '',\n    name: '',\n  };\n\n  componentDidMount() {\n    const { dispatchResetGame } = this.props;\n    dispatchResetGame();\n  }\n\n  componentDidUpdate() {\n    const { token, history } = this.props;\n    const isFetchedToken = Boolean(token.length);\n    if (isFetchedToken) {\n      history.push('/trivia');\n    }\n  }\n\n  handleChange = ({ target: { id, value } }) => {\n    this.setState({\n      [id]: value,\n    });\n  };\n\n  render() {\n    const { gravatarEmail, name } = this.state;\n    const isDisabledButton = !(gravatarEmail.length && name.length);\n    const { dispatchSetUser, history, dispatchFetchToken } = this.props;\n\n    return (\n      <div className=\"container-form\">\n        <form\n          action=\"/action_page.php\"\n          method=\"post\"\n          className=\"container-form-box\"\n        >\n          <header className=\"container-form-header\">\n            <img src={ svgAvatar } alt=\"svg_avatar\" className=\"svg_avatar\" />\n          </header>\n\n          <main className=\"container-form-main\">\n            <label\n              htmlFor=\"gravatarEmail\"\n              className=\"container-form-main-label1\"\n            >\n              <input\n                className=\"container-form-main-label1-input1\"\n                id=\"gravatarEmail\"\n                value={ gravatarEmail }\n                onChange={ this.handleChange }\n                data-testid=\"input-gravatar-email\"\n                type=\"email\"\n                placeholder=\"Email do Gravatar:\"\n                name=\"gravatarEmail\"\n                required\n              />\n            </label>\n\n            <label htmlFor=\"name\" className=\"container-form-main-label2\">\n              <input\n                className=\"container-form-main-label2-input1\"\n                id=\"name\"\n                value={ name }\n                onChange={ this.handleChange }\n                data-testid=\"input-player-name\"\n                type=\"text\"\n                placeholder=\"Nome do Jogador:\"\n                name=\"name\"\n                required\n              />\n            </label>\n\n            <button\n              className={\n                isDisabledButton\n                  ? 'container-form-main-button1 disabled'\n                  : 'container-form-main-button1'\n              }\n              id=\"play-Button\"\n              type=\"button\"\n              disabled={ isDisabledButton }\n              onClick={ () => {\n                dispatchSetUser(this.state);\n                dispatchFetchToken();\n              } }\n              data-testid=\"btn-play\"\n            >\n              Jogar\n            </button>\n\n            <button\n              className=\"container-form-main-button2\"\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              onClick={ () => {\n                history.push('/Configuration');\n              } }\n            >\n              Configurações\n            </button>\n          </main>\n          <footer className=\"container-form-footer\" />\n\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  token: propTypes.string.isRequired,\n  dispatchSetUser: propTypes.func.isRequired,\n  dispatchFetchToken: propTypes.func.isRequired,\n  dispatchResetGame: propTypes.func.isRequired,\n  history: propTypes.shape({\n    push: propTypes.func,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSetUser: (user) => dispatch(setUser(user)),\n  dispatchFetchToken: () => dispatch(fetchToken()),\n  dispatchResetGame: () => dispatch(resetGame()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getRanking } from '../../services/localstorage';\nimport './style.css';\n\nexport class Ranking extends Component {\n  constructor() {\n    super();\n    this.state = {\n      storage: [],\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      storage: getRanking(),\n    });\n  }\n\n  handleClick = () => {\n    const { history } = this.props;\n    history.push('/triviaApp');\n  }\n\n  rankingList = () => {\n    const { storage } = this.state;\n    const storageSort = storage.sort((a, b) => {\n      if (a.score < b.score) {\n        const ONE = 1;\n        return ONE;\n      }\n      if (a.score > b.score) {\n        const ONE_LESS = -1;\n        return ONE_LESS;\n      }\n      return 0;\n    });\n    return (\n      <section className=\"ranking-container\">\n        {storageSort.map(({ name, score, picture }, index) => (\n          <div className=\"rank-card\" key={ index }>\n            <img className=\"rank-img\" src={ picture } alt=\"imagem de perfil do jogador\" />\n            <h1 className=\"rank-name\" data-testid={ `player-name-${index}` }>\n              { name }\n            </h1>\n            <h2 className=\"rank-score\" data-testid={ `player-score-${index}` }>\n              { score }\n            </h2>\n          </div>\n        ))}\n      </section>\n    );\n  }\n\n  render() {\n    return (\n      <main className=\"Ranking\">\n        <section className=\"title-container\">\n          <h1 className=\"ranking-title\" data-testid=\"ranking-title\">Ranking</h1>\n          <button\n            className=\"home-button\"\n            data-testid=\"btn-go-home\"\n            type=\"button\"\n            onClick={ this.handleClick }\n          >\n            Início\n          </button>\n        </section>\n        {\n          this.rankingList()\n        }\n      </main>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Ranking;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport getGravatarUrl from '../../services/gravatar';\nimport './style.css';\n\nclass Header extends React.Component {\n  render() {\n    const { name, score, gravatarEmail } = this.props;\n\n    return (\n      <header className=\"Header\">\n        <img\n          className=\"player-img\"\n          src={ getGravatarUrl(gravatarEmail) }\n          alt=\"Imagem de perfil\"\n          data-testid=\"header-profile-picture\"\n        />\n\n        <h1\n          className=\"player-name\"\n          data-testid=\"header-player-name\"\n        >\n          { name }\n        </h1>\n\n        <p\n          className=\"player-score\"\n        >\n          Pontuação atual:\n          <span data-testid=\"header-score\">{` ${score}`}</span>\n        </p>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n  gravatarEmail: state.player.gravatarEmail,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../../components/Header';\nimport Question from '../../components/Question';\nimport { fetchToken, fetchTrivia } from '../../redux/actions';\nimport { getToken } from '../../services/localstorage';\nimport './style.css';\n\nexport class Trivia extends Component {\n  state = {\n    questionIndex: 0,\n  }\n\n  componentDidMount() {\n    const { dispatchFetchTrivia, configuration } = this.props;\n    const token = getToken();\n\n    dispatchFetchTrivia(token, configuration);\n  }\n\n  componentDidUpdate({ token: prevToken }) {\n    const { responseCode, token, dispatchFetchToken,\n      dispatchFetchTrivia, configuration } = this.props;\n    if (responseCode && prevToken === token) {\n      dispatchFetchToken();\n    } else if (responseCode) {\n      dispatchFetchTrivia(token, configuration);\n    }\n  }\n\n  questionIndexNext = () => {\n    this.setState((prevState) => ({\n      questionIndex: prevState.questionIndex + 1,\n    }));\n  }\n\n  render() {\n    const { questions, history } = this.props;\n    const { questionIndex } = this.state;\n    const isLoading = questions.length === 0;\n\n    return (\n      <>\n        <Header />\n\n        {isLoading\n          ? (\n            <main className=\"loading\">\n              Carregando...\n            </main>\n          ) : (\n            <Question\n              question={ questions[questionIndex] }\n              questionIndex={ questionIndex }\n              questionIndexNext={ this.questionIndexNext }\n              history={ history }\n            />\n          )}\n      </>\n    );\n  }\n}\n\nTrivia.propTypes = {\n  token: PropTypes.string.isRequired,\n  responseCode: PropTypes.number.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  configuration: PropTypes.objectOf(PropTypes.string).isRequired,\n  dispatchFetchTrivia: PropTypes.func.isRequired,\n  dispatchFetchToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.trivia.questions,\n  responseCode: state.trivia.responseCode,\n  configuration: state.configs,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchFetchTrivia: (token, configuration) => (\n    dispatch(fetchTrivia(token, configuration))\n  ),\n  dispatchFetchToken: () => dispatch(fetchToken()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes, { oneOfType, string, number } from 'prop-types';\nimport Header from '../../components/Header';\nimport { saveRanking } from '../../services/localstorage';\nimport './style.css';\n\nclass FeedBack extends React.Component {\n  componentDidMount() {\n    const { player } = this.props;\n    if (player.name !== '') {\n      saveRanking(player);\n    }\n  }\n\n  feedback = () => {\n    const { assertions } = this.props;\n    const THREE_ASSERTIONS = 3;\n\n    if (assertions < THREE_ASSERTIONS) {\n      return (<h1 className=\"fb-h1\" data-testid=\"feedback-text\">Could be better...</h1>);\n    }\n    return (<h1 className=\"fb-h1\" data-testid=\"feedback-text\">Well Done!</h1>);\n  }\n\n  redirectToLogin = () => {\n    const { history } = this.props;\n    history.push('/triviaApp');\n  }\n\n  redirectToRanking = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const { assertions, score } = this.props;\n    return (\n      <>\n        <Header />\n        <main className=\"FeedBack\">\n          <section className=\"feedback-container\">\n            {this.feedback()}\n            <h2 className=\"fb-h2\">\n              Voce acertou\n              <span data-testid=\"feedback-total-question\">{` ${assertions} `}</span>\n              questões!\n            </h2>\n            <h2 className=\"fb-h2\">\n              Um total de\n              <span data-testid=\"feedback-total-score\">{` ${score} `}</span>\n              pontos.\n            </h2>\n          </section>\n          <section className=\"fb-buttons-container\">\n            <button\n              className=\"play-again-button\"\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ this.redirectToLogin }\n            >\n              Jogar novamente\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n              onClick={ this.redirectToRanking }\n            >\n              Ver Ranking\n            </button>\n          </section>\n        </main>\n      </>\n    );\n  }\n}\n\nFeedBack.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  player: PropTypes.objectOf(oneOfType([string, number])).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  player: state.player,\n});\n\nexport default connect(mapStateToProps, null)(FeedBack);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Configuration from './pages/Configuration';\nimport Login from './pages/Login';\nimport Ranking from './pages/Ranking';\nimport Trivia from './pages/Trivia';\nimport FeedBack from './pages/FeedBack';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/triviaApp\" component={ Login } />\n        <Route path=\"/Trivia\" component={ Trivia } />\n        <Route path=\"/Ranking\" component={ Ranking } />\n        <Route path=\"/Configuration\" component={ Configuration } />\n        <Route path=\"/feedback\" component={ FeedBack } />\n      </Switch>\n    </div>\n  );\n}\n","import { RESET_GAME, SET_SCORE, SET_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_USER:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.gravatarEmail,\n    };\n  case SET_SCORE:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n      score: state.score + action.payload,\n    };\n  case RESET_GAME:\n    return {\n      ...state,\n      score: 0,\n      assertions: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { RESET_GAME, TOKEN_SUCCESS } from '../actions';\n\nconst INITIAL_STATE = '';\n\nconst token = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TOKEN_SUCCESS:\n    return action.payload;\n  case RESET_GAME:\n    return '';\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","import { RESET_GAME, TRIVIA_ERROR, TRIVIA_FETCHING, TRIVIA_SUCCESS } from '../actions';\n\nconst INITIAL_STATE = {\n  isFetching: false,\n  error: undefined,\n  questions: [],\n  responseCode: 0,\n};\n\nconst trivia = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TRIVIA_FETCHING:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case TRIVIA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      questions: action.payload.results,\n      responseCode: action.payload.response_code,\n    };\n  case TRIVIA_ERROR:\n    return {\n      ...state,\n      isFetching: false,\n      error: action.payload,\n    };\n  case RESET_GAME:\n    return {\n      ...state,\n      questions: [],\n      responseCode: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default trivia;\n","import { SET_CATEGORY, SET_DIFFICULTY, SET_TYPE } from '../actions';\n\nconst initialState = {\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nconst configs = (state = initialState, action) => {\n  switch (action.type) {\n  case SET_CATEGORY:\n    return {\n      ...state,\n      category: action.payload,\n    };\n  case SET_DIFFICULTY:\n    return {\n      ...state,\n      difficulty: action.payload,\n    };\n  case SET_TYPE:\n    return {\n      ...state,\n      type: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default configs;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\nimport trivia from './trivia';\nimport configs from './configs';\n\nconst rootReducer = combineReducers({\n  player,\n  token,\n  trivia,\n  configs,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/svg_avatar.3973cd6b.svg\";"],"sourceRoot":""}